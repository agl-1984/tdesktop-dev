name: Public Release - MacOS

on:
  workflow_call:
  workflow_dispatch:

jobs:

  macos:
    environment: Release
    name: MacOS
    runs-on: macos-13

    strategy:
      matrix:
        defines:
          - ""
    env:
      GIT: "https://github.com"
      OPENALDIR: "/usr/local/opt/openal-soft"
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      ARTIFACT_NAME: "Mac-PTelegram"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"

    steps:
      - name: Get repository name.
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone.
        uses: actions/checkout@v3.1.0
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up.
        run: |
          brew update
          brew upgrade || true
          brew install autoconf automake boost cmake ffmpeg openal-soft openssl opus ninja pkg-config python qt yasm xz

          brew install icoutils create-dmg

          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

          echo "LibrariesPath=`pwd`" >> $GITHUB_ENV

          curl -o tg_owt-version.json https://api.github.com/repos/desktop-app/tg_owt/git/refs/heads/master

      - name: RNNoise.
        run: |
          cd $LibrariesPath

          git clone --depth=1 https://gitlab.xiph.org/xiph/rnnoise.git
          cd rnnoise
          ./autogen.sh
          ./configure --disable-examples --disable-doc
          make -j$(sysctl -n hw.logicalcpu)
          make install

      - name: WebRTC.
        run: |
          cd $LibrariesPath

          git clone --recursive --depth=1 $GIT/desktop-app/tg_owt.git
          cd tg_owt

          cmake -B build . -GNinja -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Free up some disk space.
        run: |
          cd Libraries
          find . -iname "*.dir" -exec rm -rf {} || true \;

      - name: Read defines.
        run: |
          echo "ARTIFACT_NAME=PTelegram_${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        env:
          tg_owt_DIR: ${{ env.LibrariesPath }}/tg_owt/build
          RSA_PRIVATE: ${{ secrets.RSA_PRIVATE }}
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          cd $REPO_NAME/Telegram/build

          python3 release_build.py mac

      - name: Check.
        run: |
          filePath="$REPO_NAME/out/Release/deploy"
          if test -d "$filePath"; then
            echo "Build successfully done! :)"

            ls $filePath
          else
            echo "Build error, output file does not exist."
            exit 1
          fi

      - name: Move artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          cd $REPO_NAME/out/Release/deploy
          mkdir ../artifact
          mv * ../artifact

      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact.
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/Release/artifact/tsetup*

      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact TG.
        with:
          name: ${{ env.ARTIFACT_NAME }}_tg
          path: ${{ env.REPO_NAME }}/out/Release/artifact/t*macupd*

      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact Extra.
        with:
          name: ${{ env.ARTIFACT_NAME }}_extra
          path: ${{ env.REPO_NAME }}/out/Release/artifact/*.zip
